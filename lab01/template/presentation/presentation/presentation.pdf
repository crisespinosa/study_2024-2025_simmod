---
## Front matter
lang: ru-RU
title: Лабораторная работа 1
subtitle: Простые модели компьютерной сети
author:
  - Эспиноса Василита К.М.
institute:
  - Российский университет дружбы народов, Москва, Россия
  - Объединённый институт ядерных исследований, Дубна, Россия
date: 01 января 1970

## i18n babel
babel-lang: russian
babel-otherlangs: english

## Formatting pdf
toc: false
toc-title: Содержание
slide_level: 2
aspectratio: 169
section-titles: true
theme: metropolis
header-includes:
 - \metroset{progressbar=frametitle,sectionpage=progressbar,numbering=fraction}
---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="70%"}

  * Эспиноса Василита Кристина Микаела
  * студентка
  * Российский университет дружбы народов
  * [1032224624@pfur.ru](mailto:1032224624@pfur.ru)
  * <https://github.com/crisespinosa/>

:::
::: {.column width="30%"}



:::
::::::::::::::

## Цель работы

Приобрести навыки моделирования сетей передачи данных с помощью средства имитационного моделирования NS-2, а также проанализировать полученные результаты моделирования.

## Задание

1- Создать шаблон сценария для NS-2;
2- Выполнить простой пример описания топологии сети, состоящей из двух узлов и одного соединения;
3- Выполнить пример с усложнённой топологией сети;
4- Выполнить пример с кольцевой топологией сети;
5- Упражнение.



# Выполнение лабораторной работы

## Шаблон сценария для NS-2

В своём рабочем каталоге создадим директорию mip, в которой будут выполняться лабораторные работы. Внутри mip создадим директорию lab-ns, а в ней файл shablon.tcl


(рис. [-@fig:001]).

![](image/1.PNG){#fig:001 width=70%}

## Шаблон сценария для NS-2

На редактирование файл shablon.tcl, создадим объект типа Simulator, затем создадим переменную nf и укажем, что требуется открыть на запись nam-файл
для регистрации выходных результатов моделирования. Далее создадим переменную f и откроем на запись файл трассировки для регистрации всех событий модели.

После этого добавим процедуру finish, которая закрывает файлы трассировки и запускает nam. С помощью команды at указываем планировщику событий,
что процедуру finish запустим через 5 с после начала моделирования, после чего запустим симулятор ns.

(рис. [-@fig:002]).

![](image/2.PNG){#fig:002 width=70%}



## Простой пример описания топологии сети, состоящей из двух узлов и одного соединения

Требуется смоделировать сеть передачи данных, состоящую
из двух узлов, соединённых дуплексной линией связи с полосой пропускания 2
Мб/с и задержкой 10 мс, очередью с обслуживанием типа DropTail. От одного узла
к другому по протоколу UDP осуществляется передача пакетов, размером 500 байт,
с постоянной скоростью 200 пакетов в секунду.


(рис. [-@fig:003]).

![](image/3.PNG){#fig:003 width=70%}

## Простой пример описания топологии сети, состоящей из двух узлов и одного соединения

Сохранив изменения в отредактированном файле и запустив симулятор, 
получим в качестве результата запуск аниматора nam в фоновом режиме.

(рис. [-@fig:004]).

![](image/1.1.PNG){#fig:004 width=70%}

## Пример с усложнённой топологией сети

**Описание моделируемой сети:**

-сеть состоит из 4 узлов (n0, n1, n2, n3);
-между узлами n0 и n2, n1 и n2 установлено дуплексное соединение с пропускной способностью 2 Мбит/с и задержкой 10 мс;
-между узлами n2 и n3 установлено дуплексное соединение с пропускной способностью 1,7 Мбит/с и задержкой 20 мс;
-каждый узел использует очередь с дисциплиной DropTail для накопления пакетов, максимальный размер которой составляет 10;
-TCP-источник на узле n0 подключается к TCP-приёмнику на узле n3 (по-умолчанию, максимальный размер пакета, который TCP-агент может генерировать, равняется 1KByte)
-TCP-приёмник генерирует и отправляет ACK пакеты отправителю и откидывает полученные пакеты;
-UDP-агент, который подсоединён к узлу n1, подключён к null-агенту на узле n3 (null-агент просто откидывает пакеты);
-генераторы трафика ftp и cbr прикреплены к TCP и UDP агентам соответственно;
-генератор cbr генерирует пакеты размером 1 Кбайт со скоростью 1 Мбит/с;
-работа cbr начинается в 0,1 секунду и прекращается в 4,5 секунды, а ftp начинает работать в 1,0 секунду и прекращает в 4,0 секунды.

## Пример с усложнённой топологией сети

(рис. [-@fig:005]).

![](image/4.PNG){#fig:005 width=70%}

## Пример с усложнённой топологией сети

Создадим агенты-получатели. Соединим агенты udp0 и tcp1 и их получателей. Зададим описание цвета каждого потока. Выполним отслеживание событий в очереди и наложение ограничения на размер очереди. Добавим at-события.

(рис. [-@fig:006]).

![](image/5.PNG){#fig:006 width=70%}

## Пример с усложнённой топологией сети

Сохранив изменения в отредактированном файле и запустив симулятор, получим анимированный результат моделирования

(рис. [-@fig:007]).

![](image/1.2.PNG){#fig:007 width=70%}

## Пример с кольцевой топологией сети

**Описание модели передачи данных по сети с кольцевой топологией и динамической маршрутизацией пакетов:**

-сеть состоит из 7 узлов, соединённых в кольцо;
-данные передаются от узла n(0) к узлу n(3) по кратчайшему пути;
-с 1 по 2 секунду модельного времени происходит разрыв соединения между узлами n(1) и n(2);
-при разрыве соединения маршрут передачи данных должен измениться на резервный.

## Пример с кольцевой топологией сети

Скопируем содержимое созданного шаблона в новый файл: cp shablon.tcl example3.tcl и откроем example3.tcl на редактирование. Опишем топологию моделируемой сети. 
Далее соединим узлы так, чтобы создать круговую топологию. Каждый узел, за исключением последнего, соединяется со следующим, последний соединяется с первым. 
Для этого в цикле использован оператор %, означающий остаток от деления нацело. 
Зададим передачу данных от узла n(0) к узлу n(3).
Данные передаются по кратчайшему маршруту от узла n(0) к узлу n(3), через узлы n(1) и n(2)

## Пример с кольцевой топологией сети

(рис. [-@fig:008]).

![](image/6.PNG){#fig:008 width=70%}

## Пример с кольцевой топологией сети

(рис. [-@fig:009]).

![](image/1.3.PNG){#fig:009 width=70%}

## Пример с кольцевой топологией сети

**Передача данных при кольцевой топологии сети в случае разрыва соединения**

(рис. [-@fig:010]).

![](image/1.5.PNG){#fig:010 width=70%}

## Пример с кольцевой топологией сети

Добавив в начало скрипта после команды создания объекта Simulator `$ns rtproto DV` и увидим, 
что сразу после запуска в сети отправляется небольшое количество маленьких пакетов, используемых для обмена информацией, необходимой для маршрутизации между узлами

(рис. [-@fig:011]).

![](image/1.4.PNG){#fig:011 width=70%}

## Упражнение

Внесем следующие изменения в реализацию примера с кольцевой топологией сети:

-передача данных должна осуществляться от узла n(0) до узла n(5) по кратчайшему пути в течение 5 секунд модельного времени;
-передача данных должна идти по протоколу TCP (тип Newreno), на принимающей стороне используется TCPSink-объект типа DelAck; поверх TCP работает протокол FTP с 0,5 до 4,5 секунд модельного времени;
-с 1 по 2 секунду модельного времени происходит разрыв соединения между узлами n(0) и n(1);
-при разрыве соединения маршрут передачи данных должен измениться на резервный, после восстановления соединения пакеты снова должны пойти по кратчайшему пути.

## Упражнение

Изменим количество узлов в кольце на 5, а 6 узел n(5) отдельно присоединим к узлу n(1). Вместо агента UDP создадим агента TCP, 
а на принимающей стороне используем TCPSink-объект типа DelAck; поверх TCP работает протокол FTP с 0,5 до 4,5 секунд модельного времени Также зададим с 1 по 2 секунду модельного времени разрыв соединения между узлами n(0) и n(1)

(рис. [-@fig:012]).

![](image/1.6(2).PNG){#fig:012 width=70%}

## Упражнение

Запустим программу и увидим, что пакеты идут по кратчайшему пути через узел n(1)

(рис. [-@fig:013]).

![](image/1.7.PNG){#fig:013 width=70%}

## Упражнение

При соединению часть пакетов теряется, но данные пакеты начинают идти по другому пути и после восстановления соединения пакеты снова идут по кратчайшему пути

(рис. [-@fig:014]).

![](image/1.8.PNG){#fig:014 width=70%}

## Упражнение

(рис. [-@fig:015]).

![](image/1.9.PNG){#fig:015 width=70%}

# Выводы

В процессе выполнения данной лабораторной работы я приобрела навыки моделирования сетей передачи данных с помощью средства имитационного моделирования NS-2, а также проанализировала полученные результаты моделирования.
